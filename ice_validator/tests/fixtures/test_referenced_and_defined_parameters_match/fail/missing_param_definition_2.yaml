# -*- coding: utf8 -*-
# ============LICENSE_START=======================================================
# org.onap.vvp/validation-scripts
# ===================================================================
# Copyright © 2017 AT&T Intellectual Property. All rights reserved.
# ===================================================================
#
# Unless otherwise specified, all software contained herein is licensed
# under the Apache License, Version 2.0 (the “License”);
# you may not use this software except in compliance with the License.
# You may obtain a copy of the License at
#
#             http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
#
# Unless otherwise specified, all documentation contained herein is licensed
# under the Creative Commons License, Attribution 4.0 Intl. (the “License”);
# you may not use this documentation except in compliance with the License.
# You may obtain a copy of the License at
#
#             https://creativecommons.org/licenses/by/4.0/
#
# Unless required by applicable law or agreed to in writing, documentation
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ============LICENSE_END============================================
#
# ECOMP is a trademark and service mark of AT&T Intellectual Property.
#
---
heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  vnf_id:
    description: Unique ID for this VNF
    type: string
  vf_module_id:
    description: Unique ID for this VF module
    type: string
  vnf_name:
    type: string
    description: Unique name for this VNF instance
  ex_image_name:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
  ex_flavor_name:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
  ex_key:
    type: string
    label: key pair
    description: Name of the key apir the nova server will use
  ex_vm_name:
    type: string
    description: Name of the VM
  ex1_vm_names:
    type: comma_delimited_list
    description: Name of the VM
  ex1_image_name:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
  ex1_flavor_name:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used  
  ex1_key:
    type: string
    label: key pair
    description: Name of the key apir the nova server will use

resources:
  ex_software_config_0:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
          params:
            $stack_name: { get_param: 'OS::stack_name' }

  ex_nova_server_0:
    type: OS::Nova::Server
    properties:
      name: { get_param: ex_vm_name }
      metadata:
        vnf_id: { get_param: vnf_id }
        vf_module_id: { get_param: vf_module_id }
        vnf_name: { get_param: vnf_name }
      image: { get_param: ex_image_name }
      flavor: { get_param: ex_flavor_name }
      key_name: { get_param: ex_key }
      user_data:
        get_resource: ex_software_config_0

  ex1_nova_server_0:
    type: OS::Nova::Server
    properties:
      name: { get_param: [ ex1_vm_names, 0 ] }
      metadata:
        vnf_id: { get_param: vnf_id }
        vf_module_id: { get_param: vf_module_id }
        vnf_name: { get_param: vnf_name }
        metering.stack: { get_param: "OS::stack_id" }
      image: { get_param: ex1_image_name}
      flavor: { get_param: ex1_flavor_name }
      key_name: { get_param: ex1_key }

  ex1_nova_server_1:
    type: OS::Nova::Server
    properties:
      name: { get_param: [ ex1_vm_names, { get_param: ex1_server_index } ] }
      metadata:
        vnf_id: { get_param: vnf_id }
        vf_module_id: { get_param: vf_module_id }
        vnf_name: { get_param: vnf_name }
      image: { get_param: ex1_image_name}
      flavor: { get_param: ex1_flavor_name }
      key_name: { get_param: ex1_key }