# -*- coding: utf8 -*-
# ============LICENSE_START=======================================================
# org.onap.vvp/validation-scripts
# ===================================================================
# Copyright © 2017 AT&T Intellectual Property. All rights reserved.
# ===================================================================
#
# Unless otherwise specified, all software contained herein is licensed
# under the Apache License, Version 2.0 (the “License”);
# you may not use this software except in compliance with the License.
# You may obtain a copy of the License at
#
#             http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
#
# Unless otherwise specified, all documentation contained herein is licensed
# under the Creative Commons License, Attribution 4.0 Intl. (the “License”);
# you may not use this documentation except in compliance with the License.
# You may obtain a copy of the License at
#
#             https://creativecommons.org/licenses/by/4.0/
#
# Unless required by applicable law or agreed to in writing, documentation
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ============LICENSE_END============================================
#
# ECOMP is a trademark and service mark of AT&T Intellectual Property.
#
---
heat_template_version: 2015-04-30

description: Heat template description

parameters:

  vnf_id:
    type: string
    description: Unique ID for this VNF instance

  vf_module_id:
    type: string
    description: Unique ID for this VF module

  vnf_name:
    type: string
    description: Unique name for this VNF instance

  admin_names:
    type: comma_delimited_list
    description: Names attribute for the VMs

  availability_zone_0:
    type: string
    description: availability zone to be used

  admin_flavor_name:
    type: string
    description: flavor to be used to create this vm must be one of the following flavors

  admin_volume_id_0:
    type: string
    description: reference to externally created cinder vol

  admin_volume_id_1:
    type: string
    description: reference to externally created cinder vol

  admin_volume_id_2:
    type: string
    description: reference to externally created cinder vol

  admin_volume_size_0:
    type: number
    description: Size of the volume to be created.
    constraints:
      - range: { min: 1, max: 1024 }
        description: must be between 1 and 1024 Gb.

resources:

  admin_server_0:
    type: OS::Nova::Server
    properties:
      availability_zone: { get_param: availability_zone_0 }
      name: { get_param: [admin_names, 0]  }
      block_device_mapping: [{ device_name: "vda", volume_id: { get_param : admin_volume_id_0 }, delete_on_termination : "false" }]
      flavor: { get_param: admin_flavor_name}
      metadata:
        vnf_name: { get_param: vnf_name }
        vnf_id: { get_param: vnf_id }
        vf_module_id: { get_param: vf_module_id }

  admin_server_1:
    type: OS::Nova::Server
    properties:
      availability_zone: { get_param: availability_zone_0 }
      name: { get_param: [admin2_names, 1]  }
      block_device_mapping: [{ device_name: "vda", volume_id : { get_param : admin_volume_id_1 }, delete_on_termination : "false" }]
      flavor: { get_param: admin2_flavor_name}
      metadata:
        vnf_name: { get_param: vnf_name }
        vnf_id: { get_param: vnf_id }
        vf_module_id: { get_param: vf_module_id }

  admin_server_2:
    type: OS::Nova::Server
    properties:
      availability_zone: { get_param: availability_zone_0 }
      name: { get_param: [admin_names, 2]  }
      flavor: { get_param: admin_flavor_name}
      metadata:
        vnf_name: { get_param: vnf_name }
        vnf_id: { get_param: vnf_id }
        vf_module_id: { get_param: vf_module_id }

  admin_server_3:
    type: OS::Nova::Server
    properties:
      availability_zone: { get_param: availability_zone_0 }
      name: { get_param: [admin_names, 3]  }
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : admin_volume_id_3 }, delete_on_termination : "false" }]
      flavor: { get_param: admin_flavor_name}
      metadata:
        vnf_name: { get_param: vnf_name }
        vnf_id: { get_param: vnf_id }
        vf_module_id: { get_param: vf_module_id }

  admin_volume_id_3:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: admin_volume_size_0}
      availability_zone: { get_param: availability_zone_0 }

  admin_volume_attachment_0:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_param: admin_volume_id_2 }
      mountpoint: /dev/vdb
      instance_uuid: { get_resource: admin_server_2 }